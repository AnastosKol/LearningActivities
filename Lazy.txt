***************************************************
					Lazy Anastos
***************************************************



###################################################
						Git
###################################################
1) Set your name and email
§ git config --global user.name "Anastos"
§ git config --global user.email "anastoskol@gmail.com"

2) Check correct settings
§ git config --list

3) Check specific setting
§ git config user.email

4) Add changes of all modified files 
§ git add .

4a) Add changes of a single modified file
§ git add <file.txt>

5) Make a commit (all files)
§ git commit -m "Message"

6) View your commits (history)
§ git log 

6a) § git log --pretty=oneline (One line logs!!)

7) View a specific author's commits
§ git log --author="Name"

7a) Fancy logs
§ git log --all --pretty=format:'%h %cd %s (%an)' --since='7 days ago'
git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short

8) Get the status of my commits
§ git status

9) Git workfolow
Working directory (Local Computer (Red)) -> Staging area (add (Green)) -> Repository (commit)

10) Compare differencies of the working copy against my repository
§ git diff

11) Compare differencies of the staging area against the repository
§ git diff --staged

12) Remove a file both from git and the folder
§ git rm file.txt

13) Rename a file
§ git mv OldName.txt NewName.txt

14) Commit with skipping the staged area
§ git commit -am

15) UNDO changes, Take a file from my repo and make it working copy (Working Copy <- Repo)
§ git checkout -- file.txt

16) Remove a file from the staging area (Unstage)
§ git reset HEAD file.txt

17) Get an old version from the Repo
§ git checkout  <commit number> -- file
e.g., git checkout 035sd24 (first few numbers) -- index.html

18) Make a new branch 
§ git branch <Name>

19) Switch to another branch
§ git checkout <Name of the already existing branch>

20) Check my branches
§ git branch

21) Merging two branches together. a) Go to the branch you want to merge stuff
§ git merge <Name of the other branch>

22) Delete a branch localy
§ git branch -d <Name of the branch>

23) Adding aliases: Add the following in .gitconfig:
[alias]
  co = checkout
  ci = commit
  st = status
  br = branch
  hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
  type = cat-file -t
  dump = cat-file -p

  24) Tag a commit
  § git tag <name>

  25) View tagged commits 
  § git tag

  26) Delete a tag
  § git tag -d <tagname>

27) UNDO local changes (working directory)
§ git checkout <file>

28) UNDO staged changes (before committing)
§ git reset HEAD <file>

29) UNDO commited changes
§ git rever HEAD
  
*****************************************************************
GitHub:

1) Add a remote 
§ git remote add <NameIt> <URL>

2) Clone a remote 
§ git clone <URL> <optional folder>
or 
§ git clone <ssh> <optional folder>

3) Push my files to the remote
§ git push -u <NameIt>

4) Push files 
§ git push <NameIt> <Branch>

5) Update all local branches with the remote branches
§ git pull

6) Delete a branch remotely
§ git push origin  --delete <Name of branch>

7) Update the local branches without updating the current branch (HEAD), does not merge
§ git fetch

8) Integrate your commits in the master branch
§ git merge